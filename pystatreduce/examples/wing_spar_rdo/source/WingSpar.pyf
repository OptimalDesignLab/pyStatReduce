!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module WingSpar ! in 
    interface  ! in :WingSpar
        module wingspar ! in :WingSpar:WingSpar.f90
            double precision, public,parameter,private,optional :: pi=3.14159265359d0
            integer, public,private :: nelem
            integer, public,allocatable,private,dimension(:) :: ipiv
            double precision, public,allocatable,private,dimension(:,:) :: a
            double precision, public,allocatable,private,dimension(:,:) :: lu
            subroutine initialize(numelement) ! in :WingSpar:WingSpar.f90:wingspar
                integer intent(in) :: numelement
            end subroutine initialize
            subroutine hermitebasis(xi,dx,n) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: xi
                double precision intent(in) :: dx
                double precision dimension(4),intent(out) :: n
            end subroutine hermitebasis
            subroutine d2hermitebasis(xi,dx,b) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: xi
                double precision intent(in) :: dx
                double precision dimension(4),intent(out) :: b
            end subroutine d2hermitebasis
            subroutine gaussquad_vec(func,n,work,integral) ! in :WingSpar:WingSpar.f90:wingspar
                external func
                integer intent(in) :: n
                double precision dimension(:),intent(inout) :: work
                double precision dimension(:),intent(out) :: integral
                interface  ! in :WingSpar:WingSpar.f90:wingspar:gaussquad_vec
                    subroutine func(x,y) ! in :WingSpar:WingSpar.f90:wingspar:gaussquad_vec:unknown_interface
                        double precision intent(in) :: x
                        double precision dimension(:),intent(out) :: y
                    end subroutine func
                end interface 
            end subroutine gaussquad_vec
            subroutine gaussquad_mat(func,n,work,integral) ! in :WingSpar:WingSpar.f90:wingspar
                external func
                integer intent(in) :: n
                double precision dimension(:,:),intent(inout) :: work
                double precision dimension(:,:),intent(out) :: integral
                interface  ! in :WingSpar:WingSpar.f90:wingspar:gaussquad_mat
                    subroutine func(x,y) ! in :WingSpar:WingSpar.f90:wingspar:gaussquad_mat:unknown_interface
                        double precision intent(in) :: x
                        double precision dimension(:,:),intent(out) :: y
                    end subroutine func
                end interface 
            end subroutine gaussquad_mat
            subroutine calcelemload(ql,qr,dx,belem) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: ql
                double precision intent(in) :: qr
                double precision intent(in) :: dx
                double precision dimension(4),intent(out) :: belem
            end subroutine calcelemload
            subroutine calcelemstiff(e,il,ir,dx,aelem) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: e
                double precision intent(in) :: il
                double precision intent(in) :: ir
                double precision intent(in) :: dx
                double precision dimension(4,4),intent(inout) :: aelem
            end subroutine calcelemstiff
            subroutine calcbeammoment(n,l,force,m) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check(len(force)>=n),depend(force) :: n=len(force)
                double precision :: l
                double precision dimension(n),intent(in) :: force
                double precision dimension(n),intent(out),depend(n) :: m
            end subroutine calcbeammoment
            subroutine calcsecondmomentannulus(n,r_inner,r_outer,iyy) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check(len(r_inner)>=n),depend(r_inner) :: n=len(r_inner)
                double precision dimension(n),intent(in) :: r_inner
                double precision dimension(n),intent(in),depend(n) :: r_outer
                double precision dimension(n),intent(out),depend(n) :: iyy
            end subroutine calcsecondmomentannulus
            subroutine calcsecondmomentannulus_rev(n,r_inner,r_inner_b,r_outer,r_outer_b,iyy_b) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check(len(r_inner)>=n),depend(r_inner) :: n=len(r_inner)
                double precision dimension(n),intent(in) :: r_inner
                double precision dimension(n),intent(inout),depend(n) :: r_inner_b
                double precision dimension(n),intent(in),depend(n) :: r_outer
                double precision dimension(n),intent(inout),depend(n) :: r_outer_b
                double precision dimension(n),intent(in),depend(n) :: iyy_b
            end subroutine calcsecondmomentannulus_rev
            subroutine calcpertforce(force,xi,l,pertforce) ! in :WingSpar:WingSpar.f90:wingspar
                double precision dimension(:),intent(in) :: force
                double precision dimension(:),intent(in) :: xi
                double precision intent(in) :: l
                double precision dimension(:),intent(out) :: pertforce
            end subroutine calcpertforce
            subroutine buildandfactorstiffness(l,e,n,iyy) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: l
                double precision intent(in) :: e
                integer, optional,intent(in),check(len(iyy)>=n),depend(iyy) :: n=len(iyy)
                double precision dimension(n),intent(in) :: iyy
            end subroutine buildandfactorstiffness
            subroutine buildloadvector(l,n,force,b) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: l
                integer, optional,intent(in),check(len(force)>=n),depend(force) :: n=len(force)
                double precision dimension(n),intent(in) :: force
                double precision dimension(2 * n - 2),intent(out),depend(n) :: b
            end subroutine buildloadvector
            subroutine buildlinearsystem(l,e,n,iyy,force,b) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: l
                double precision intent(in) :: e
                integer, optional,intent(in),check(len(iyy)>=n),depend(iyy) :: n=len(iyy)
                double precision dimension(n),intent(in) :: iyy
                double precision dimension(n),intent(in),depend(n) :: force
                double precision dimension(2 * n - 2),intent(out),depend(n) :: b
            end subroutine buildlinearsystem
            subroutine calcbeamdisplacement(n,b,u) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check((len(b)+2)/(2)>=n),depend(b) :: n=(len(b)+2)/(2)
                double precision dimension(2 * n - 2),intent(in) :: b
                double precision dimension(2 * n),intent(out),depend(n) :: u
            end subroutine calcbeamdisplacement
            subroutine calcbeamdisplacement_rev(l,e,n,u,u_b,iyy_b) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: l
                double precision intent(in) :: e
                integer, optional,intent(in),check((len(u))/(2)>=n),depend(u) :: n=(len(u))/(2)
                double precision dimension(2 * n),intent(in) :: u
                double precision dimension(2 * n),intent(in),depend(n) :: u_b
                double precision dimension(n),intent(out),depend(n) :: iyy_b
            end subroutine calcbeamdisplacement_rev
            function sparweight(n,x,l,rho) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check((len(x))/(2)>=n),depend(x) :: n=(len(x))/(2)
                double precision dimension(2 * n),intent(in) :: x
                double precision intent(in) :: l
                double precision intent(in) :: rho
                double precision :: sparweight
            end function sparweight
            subroutine sparweight_rev(n,x,x_b,l,rho) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check((len(x))/(2)>=n),depend(x) :: n=(len(x))/(2)
                double precision dimension(2 * n),intent(in) :: x
                double precision dimension(2 * n),intent(out),depend(n) :: x_b
                double precision intent(in) :: l
                double precision intent(in) :: rho
            end subroutine sparweight_rev
            subroutine calcbeamstress(l,e,n,zmax,u,sigma) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: l
                double precision intent(in) :: e
                integer, optional,intent(in),check(len(zmax)>=n),depend(zmax) :: n=len(zmax)
                double precision dimension(n),intent(in) :: zmax
                double precision dimension(2 * n),intent(in),depend(n) :: u
                double precision dimension(n),intent(out),depend(n) :: sigma
            end subroutine calcbeamstress
            subroutine calcbeamstress_rev(l,e,n,zmax,zmax_b,u,u_b,sigma_b) ! in :WingSpar:WingSpar.f90:wingspar
                double precision intent(in) :: l
                double precision intent(in) :: e
                integer, optional,intent(in),check(len(zmax)>=n),depend(zmax) :: n=len(zmax)
                double precision dimension(n),intent(in) :: zmax
                double precision dimension(n),intent(out),depend(n) :: zmax_b
                double precision dimension(2 * n),intent(in),depend(n) :: u
                double precision dimension(2 * n),intent(out),depend(n) :: u_b
                double precision dimension(n),intent(in),depend(n) :: sigma_b
            end subroutine calcbeamstress_rev
            subroutine stressconstraints_old(n,x,nxi,xi,l,e,force,yield,cineq) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check((len(x))/(2)>=n),depend(x) :: n=(len(x))/(2)
                double precision dimension(2 * n),intent(in) :: x
                integer, optional,intent(in),check(len(xi)>=nxi),depend(xi) :: nxi=len(xi)
                double precision dimension(nxi),intent(in) :: xi
                double precision intent(in) :: l
                double precision intent(in) :: e
                double precision dimension(n),intent(in),depend(n) :: force
                double precision intent(in) :: yield
                double precision dimension(n),intent(out),depend(n) :: cineq
            end subroutine stressconstraints_old
            subroutine stressconstraints(n,x,nxi,xi,l,force,yield,cineq) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check((len(x))/(2)>=n),depend(x) :: n=(len(x))/(2)
                double precision dimension(2 * n),intent(in) :: x
                integer, optional,intent(in),check(len(xi)>=nxi),depend(xi) :: nxi=len(xi)
                double precision dimension(nxi),intent(in) :: xi
                double precision intent(in) :: l
                double precision dimension(n),intent(in),depend(n) :: force
                double precision intent(in) :: yield
                double precision dimension(n),intent(out),depend(n) :: cineq
            end subroutine stressconstraints
            subroutine stressconstraints_old_rev(n,x,x_b,nxi,xi,l,e,force,yield,cineq_b) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check((len(x))/(2)>=n),depend(x) :: n=(len(x))/(2)
                double precision dimension(2 * n),intent(in) :: x
                double precision dimension(2 * n),intent(out),depend(n) :: x_b
                integer, optional,intent(in),check(len(xi)>=nxi),depend(xi) :: nxi=len(xi)
                double precision dimension(nxi),intent(in) :: xi
                double precision intent(in) :: l
                double precision intent(in) :: e
                double precision dimension(n),intent(in),depend(n) :: force
                double precision intent(in) :: yield
                double precision dimension(n),intent(in),depend(n) :: cineq_b
            end subroutine stressconstraints_old_rev
            subroutine stressconstraints_rev(n,x,x_b,nxi,xi,l,force,yield,cineq_b) ! in :WingSpar:WingSpar.f90:wingspar
                integer, optional,intent(in),check((len(x))/(2)>=n),depend(x) :: n=(len(x))/(2)
                double precision dimension(2 * n),intent(in) :: x
                double precision dimension(2 * n),intent(out),depend(n) :: x_b
                integer, optional,intent(in),check(len(xi)>=nxi),depend(xi) :: nxi=len(xi)
                double precision dimension(nxi),intent(in) :: xi
                double precision intent(in) :: l
                double precision dimension(n),intent(in),depend(n) :: force
                double precision intent(in) :: yield
                double precision dimension(n),intent(in),depend(n) :: cineq_b
            end subroutine stressconstraints_rev
            subroutine ludcmp(a,n,indx,d,code) ! in :WingSpar:WingSpar.f90:wingspar
                double precision dimension(:,:),intent(inout) :: a
                integer intent(in) :: n
                integer dimension(:),intent(out) :: indx
                integer intent(out) :: d
                integer intent(out) :: code
            end subroutine ludcmp
            subroutine lubksb(a,n,indx,b) ! in :WingSpar:WingSpar.f90:wingspar
                double precision dimension(:,:),intent(in) :: a
                integer intent(in) :: n
                integer dimension(:),intent(in) :: indx
                double precision dimension(:),intent(inout) :: b
            end subroutine lubksb
        end module wingspar
    end interface 
end python module WingSpar

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
